
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b4  00800060  00000f58  00000fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800214  00800214  000011a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123f  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077a  00000000  00000000  000024d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c7  00000000  00000000  00002c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00003514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007bd  00000000  00000000  00003b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000042d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 31       	cpi	r26, 0x14	; 20
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a4 e1       	ldi	r26, 0x14	; 20
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 31       	cpi	r26, 0x18	; 24
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8c 02 	call	0x518	; 0x518 <main>
  8a:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <output>:
}

void
lcd_put(char c)
{
	write(c, 1);
  92:	66 23       	and	r22, r22
  94:	11 f0       	breq	.+4      	; 0x9a <output+0x8>
  96:	c0 9a       	sbi	0x18, 0	; 24
  98:	01 c0       	rjmp	.+2      	; 0x9c <output+0xa>
  9a:	c0 98       	cbi	0x18, 0	; 24
  9c:	c1 98       	cbi	0x18, 1	; 24
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	81 bb       	out	0x11, r24	; 17
  a4:	c2 9a       	sbi	0x18, 2	; 24
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	00 00       	nop
  ac:	c2 98       	cbi	0x18, 2	; 24
  ae:	08 95       	ret

000000b0 <write>:
  b0:	c0 98       	cbi	0x18, 0	; 24
  b2:	c1 9a       	sbi	0x18, 1	; 24
  b4:	11 ba       	out	0x11, r1	; 17
  b6:	90 b3       	in	r25, 0x10	; 16
  b8:	c2 9a       	sbi	0x18, 2	; 24
  ba:	00 00       	nop
  bc:	00 00       	nop
  be:	00 00       	nop
  c0:	11 ba       	out	0x11, r1	; 17
  c2:	90 b3       	in	r25, 0x10	; 16
  c4:	c2 98       	cbi	0x18, 2	; 24
  c6:	99 23       	and	r25, r25
  c8:	9c f3       	brlt	.-26     	; 0xb0 <write>
  ca:	0e 94 49 00 	call	0x92	; 0x92 <output>
  ce:	08 95       	ret

000000d0 <avr_wait>:
  d0:	9c 01       	movw	r18, r24
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	83 bf       	out	0x33, r24	; 51
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	08 c0       	rjmp	.+16     	; 0xea <avr_wait+0x1a>
  da:	82 bf       	out	0x32, r24	; 50
  dc:	98 b7       	in	r25, 0x38	; 56
  de:	91 60       	ori	r25, 0x01	; 1
  e0:	98 bf       	out	0x38, r25	; 56
  e2:	a8 95       	wdr
  e4:	08 b6       	in	r0, 0x38	; 56
  e6:	00 fe       	sbrs	r0, 0
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <avr_wait+0x14>
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	31 09       	sbc	r19, r1
  ee:	a8 f7       	brcc	.-22     	; 0xda <avr_wait+0xa>
  f0:	13 be       	out	0x33, r1	; 51
  f2:	08 95       	ret

000000f4 <lcd_init>:
  f4:	b8 9a       	sbi	0x17, 0	; 23
  f6:	b9 9a       	sbi	0x17, 1	; 23
  f8:	ba 9a       	sbi	0x17, 2	; 23
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	0e 94 49 00 	call	0x92	; 0x92 <output>
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	0e 94 49 00 	call	0x92	; 0x92 <output>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	8c e3       	ldi	r24, 0x3C	; 60
 126:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 142:	08 95       	ret

00000144 <lcd_clr>:
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 14c:	08 95       	ret

0000014e <lcd_pos>:
 14e:	cf 93       	push	r28
 150:	c6 2f       	mov	r28, r22
 152:	98 e2       	ldi	r25, 0x28	; 40
 154:	89 9f       	mul	r24, r25
 156:	c0 0d       	add	r28, r0
 158:	11 24       	eor	r1, r1
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 162:	cc 23       	and	r28, r28
 164:	31 f0       	breq	.+12     	; 0x172 <lcd_pos+0x24>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	84 e1       	ldi	r24, 0x14	; 20
 16a:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 16e:	c1 50       	subi	r28, 0x01	; 1
 170:	d1 f7       	brne	.-12     	; 0x166 <lcd_pos+0x18>
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <lcd_puts>:
}

void
lcd_puts(const char *s)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
 17a:	ec 01       	movw	r28, r24
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	31 f0       	breq	.+12     	; 0x192 <lcd_puts+0x1c>
		write(c, 1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	0e 94 58 00 	call	0xb0	; 0xb0 <write>

void
lcd_puts(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
 18c:	89 91       	ld	r24, Y+
 18e:	81 11       	cpse	r24, r1
 190:	fa cf       	rjmp	.-12     	; 0x186 <lcd_puts+0x10>
		write(c, 1);
	}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <play_note>:
float TH_TL_MODIFIER = 1.0;

char keypad[17] = {'1', '2', '3', 'A','4', '5', '6', 'B','7', '8', '9', 'C','*', '0', '#', 'D'};

void play_note(int frequency,int duration)
{
 198:	4f 92       	push	r4
 19a:	5f 92       	push	r5
 19c:	6f 92       	push	r6
 19e:	7f 92       	push	r7
 1a0:	af 92       	push	r10
 1a2:	bf 92       	push	r11
 1a4:	cf 92       	push	r12
 1a6:	df 92       	push	r13
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	a2 97       	sbiw	r28, 0x22	; 34
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	5b 01       	movw	r10, r22
	int total_duration = ceil((20000.0 / frequency));
 1c6:	bc 01       	movw	r22, r24
 1c8:	99 0f       	add	r25, r25
 1ca:	88 0b       	sbc	r24, r24
 1cc:	99 0b       	sbc	r25, r25
 1ce:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
 1d2:	9b 01       	movw	r18, r22
 1d4:	ac 01       	movw	r20, r24
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	70 e4       	ldi	r23, 0x40	; 64
 1da:	8c e9       	ldi	r24, 0x9C	; 156
 1dc:	96 e4       	ldi	r25, 0x46	; 70
 1de:	0e 94 75 05 	call	0xaea	; 0xaea <__divsf3>
 1e2:	0e 94 59 05 	call	0xab2	; 0xab2 <ceil>
 1e6:	0e 94 e7 05 	call	0xbce	; 0xbce <__fixsfsi>
 1ea:	2b 01       	movw	r4, r22
 1ec:	3c 01       	movw	r6, r24
 1ee:	8b 01       	movw	r16, r22
	int TH = (total_duration / 2) * TH_TL_MODIFIER;
 1f0:	77 23       	and	r23, r23
 1f2:	14 f4       	brge	.+4      	; 0x1f8 <play_note+0x60>
 1f4:	6f 5f       	subi	r22, 0xFF	; 255
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
 1f8:	75 95       	asr	r23
 1fa:	67 95       	ror	r22
 1fc:	07 2e       	mov	r0, r23
 1fe:	00 0c       	add	r0, r0
 200:	88 0b       	sbc	r24, r24
 202:	99 0b       	sbc	r25, r25
 204:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__floatsisf>
 208:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <TH_TL_MODIFIER>
 20c:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <TH_TL_MODIFIER+0x1>
 210:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <TH_TL_MODIFIER+0x2>
 214:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <TH_TL_MODIFIER+0x3>
 218:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 21c:	0e 94 e7 05 	call	0xbce	; 0xbce <__fixsfsi>
 220:	6b 01       	movw	r12, r22
	
	if(TH == total_duration)
 222:	06 17       	cp	r16, r22
 224:	17 07       	cpc	r17, r23
 226:	21 f4       	brne	.+8      	; 0x230 <play_note+0x98>
	{
		TH -= 1;
 228:	62 01       	movw	r12, r4
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	c8 1a       	sub	r12, r24
 22e:	d1 08       	sbc	r13, r1
	}
	int TL = total_duration - TH;
 230:	72 01       	movw	r14, r4
 232:	ec 18       	sub	r14, r12
 234:	fd 08       	sbc	r15, r13
	
	lcd_clr();
 236:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
	char buf[17]; 
	char buf2[17];
	
	if (song_name == 1)
 23a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <song_name>
 23e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <song_name+0x1>
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	21 f5       	brne	.+72     	; 0x28e <play_note+0xf6>
	{
		lcd_clr();
 246:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
		lcd_pos(0,0);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
		sprintf(buf, "%s", "Song Name:");
 252:	8b e0       	ldi	r24, 0x0B	; 11
 254:	ed ea       	ldi	r30, 0xAD	; 173
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	de 01       	movw	r26, r28
 25a:	11 96       	adiw	r26, 0x01	; 1
 25c:	01 90       	ld	r0, Z+
 25e:	0d 92       	st	X+, r0
 260:	8a 95       	dec	r24
 262:	e1 f7       	brne	.-8      	; 0x25c <play_note+0xc4>
		lcd_puts(buf);
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
		lcd_pos(1,1);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
		sprintf(buf2, "%s", "==> Twinkle <==");
 274:	80 e1       	ldi	r24, 0x10	; 16
 276:	e8 eb       	ldi	r30, 0xB8	; 184
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	de 01       	movw	r26, r28
 27c:	52 96       	adiw	r26, 0x12	; 18
 27e:	01 90       	ld	r0, Z+
 280:	0d 92       	st	X+, r0
 282:	8a 95       	dec	r24
 284:	e1 f7       	brne	.-8      	; 0x27e <play_note+0xe6>
		lcd_puts(buf2);
 286:	ce 01       	movw	r24, r28
 288:	42 96       	adiw	r24, 0x12	; 18
 28a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	}
	if (song_name == 2)
 28e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <song_name>
 292:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <song_name+0x1>
 296:	02 97       	sbiw	r24, 0x02	; 2
 298:	21 f5       	brne	.+72     	; 0x2e2 <play_note+0x14a>
	{
		lcd_clr();
 29a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
		lcd_pos(0,0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
		sprintf(buf, "%s", "Song Name:");
 2a6:	8b e0       	ldi	r24, 0x0B	; 11
 2a8:	ed ea       	ldi	r30, 0xAD	; 173
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	de 01       	movw	r26, r28
 2ae:	11 96       	adiw	r26, 0x01	; 1
 2b0:	01 90       	ld	r0, Z+
 2b2:	0d 92       	st	X+, r0
 2b4:	8a 95       	dec	r24
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <play_note+0x118>
		lcd_puts(buf);
 2b8:	ce 01       	movw	r24, r28
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
		lcd_pos(1,2);
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
		sprintf(buf2, "%s", "==> Mario <==");
 2c8:	8e e0       	ldi	r24, 0x0E	; 14
 2ca:	e8 ec       	ldi	r30, 0xC8	; 200
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	de 01       	movw	r26, r28
 2d0:	52 96       	adiw	r26, 0x12	; 18
 2d2:	01 90       	ld	r0, Z+
 2d4:	0d 92       	st	X+, r0
 2d6:	8a 95       	dec	r24
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <play_note+0x13a>
		lcd_puts(buf2);
 2da:	ce 01       	movw	r24, r28
 2dc:	42 96       	adiw	r24, 0x12	; 18
 2de:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	}
	
	int secondary_duration = duration * 85 / total_duration;
 2e2:	25 e5       	ldi	r18, 0x55	; 85
 2e4:	2a 9d       	mul	r18, r10
 2e6:	c0 01       	movw	r24, r0
 2e8:	2b 9d       	mul	r18, r11
 2ea:	90 0d       	add	r25, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	b8 01       	movw	r22, r16
 2f0:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 2f4:	5b 01       	movw	r10, r22
	int i = 0;
	for (; i < secondary_duration; i++) 
 2f6:	16 16       	cp	r1, r22
 2f8:	17 06       	cpc	r1, r23
 2fa:	7c f4       	brge	.+30     	; 0x31a <play_note+0x182>
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
	{
		SET_BIT(PORTA,0);
 300:	d8 9a       	sbi	0x1b, 0	; 27
		avr_wait(TH);
 302:	c6 01       	movw	r24, r12
 304:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
		CLR_BIT(PORTA,0);
 308:	d8 98       	cbi	0x1b, 0	; 27
		avr_wait(TL);
 30a:	c7 01       	movw	r24, r14
 30c:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
		lcd_puts(buf2);
	}
	
	int secondary_duration = duration * 85 / total_duration;
	int i = 0;
	for (; i < secondary_duration; i++) 
 310:	0f 5f       	subi	r16, 0xFF	; 255
 312:	1f 4f       	sbci	r17, 0xFF	; 255
 314:	a0 16       	cp	r10, r16
 316:	b1 06       	cpc	r11, r17
 318:	99 f7       	brne	.-26     	; 0x300 <play_note+0x168>
		SET_BIT(PORTA,0);
		avr_wait(TH);
		CLR_BIT(PORTA,0);
		avr_wait(TL);
	}
}
 31a:	a2 96       	adiw	r28, 0x22	; 34
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	de bf       	out	0x3e, r29	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	cd bf       	out	0x3d, r28	; 61
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	bf 90       	pop	r11
 338:	af 90       	pop	r10
 33a:	7f 90       	pop	r7
 33c:	6f 90       	pop	r6
 33e:	5f 90       	pop	r5
 340:	4f 90       	pop	r4
 342:	08 95       	ret

00000344 <is_pressed>:
	}
	return choose;
}

int is_pressed(int row, int col)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	DDRC = 0;
 348:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
 34a:	15 ba       	out	0x15, r1	; 21
	SET_BIT(DDRC, row);
 34c:	44 b3       	in	r20, 0x14	; 20
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <is_pressed+0x16>
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	8a 95       	dec	r24
 35c:	e2 f7       	brpl	.-8      	; 0x356 <is_pressed+0x12>
 35e:	cf 01       	movw	r24, r30
 360:	84 2b       	or	r24, r20
 362:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC, col + 4);
 364:	85 b3       	in	r24, 0x15	; 21
 366:	eb 01       	movw	r28, r22
 368:	24 96       	adiw	r28, 0x04	; 4
 36a:	0c 2e       	mov	r0, r28
 36c:	02 c0       	rjmp	.+4      	; 0x372 <is_pressed+0x2e>
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <is_pressed+0x2a>
 376:	28 2b       	or	r18, r24
 378:	25 bb       	out	0x15, r18	; 21
	avr_wait(.1);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
	
	if (GET_BIT(PINC,col + 4))
 382:	23 b3       	in	r18, 0x13	; 19
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <is_pressed+0x48>
 388:	35 95       	asr	r19
 38a:	27 95       	ror	r18
 38c:	ca 95       	dec	r28
 38e:	e2 f7       	brpl	.-8      	; 0x388 <is_pressed+0x44>
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	20 ff       	sbrs	r18, 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <is_pressed+0x58>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
	{
		return 0;
	}
	
	return 1;
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <get_key>:
		CLR_BIT(PORTA,0);
		avr_wait(TL);
	}
}

int get_key() {
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
	int row, col;
	for (row = 0; row < 4; ++row) {
 3aa:	00 e0       	ldi	r16, 0x00	; 0
 3ac:	10 e0       	ldi	r17, 0x00	; 0
 3ae:	18 c0       	rjmp	.+48     	; 0x3e0 <get_key+0x3e>
		for (col = 0; col < 4; ++col) {
			if (is_pressed(row,col)) {
 3b0:	be 01       	movw	r22, r28
 3b2:	c8 01       	movw	r24, r16
 3b4:	0e 94 a2 01 	call	0x344	; 0x344 <is_pressed>
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	49 f0       	breq	.+18     	; 0x3ce <get_key+0x2c>
				return (row * 4) + col + 1;
 3bc:	00 0f       	add	r16, r16
 3be:	11 1f       	adc	r17, r17
 3c0:	00 0f       	add	r16, r16
 3c2:	11 1f       	adc	r17, r17
 3c4:	c0 0f       	add	r28, r16
 3c6:	d1 1f       	adc	r29, r17
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <get_key+0x44>
}

int get_key() {
	int row, col;
	for (row = 0; row < 4; ++row) {
		for (col = 0; col < 4; ++col) {
 3ce:	21 96       	adiw	r28, 0x01	; 1
 3d0:	c4 30       	cpi	r28, 0x04	; 4
 3d2:	d1 05       	cpc	r29, r1
 3d4:	69 f7       	brne	.-38     	; 0x3b0 <get_key+0xe>
	}
}

int get_key() {
	int row, col;
	for (row = 0; row < 4; ++row) {
 3d6:	0f 5f       	subi	r16, 0xFF	; 255
 3d8:	1f 4f       	sbci	r17, 0xFF	; 255
 3da:	04 30       	cpi	r16, 0x04	; 4
 3dc:	11 05       	cpc	r17, r1
 3de:	19 f0       	breq	.+6      	; 0x3e6 <get_key+0x44>
		CLR_BIT(PORTA,0);
		avr_wait(TL);
	}
}

int get_key() {
 3e0:	c0 e0       	ldi	r28, 0x00	; 0
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
 3e4:	e5 cf       	rjmp	.-54     	; 0x3b0 <get_key+0xe>
				return (row * 4) + col + 1;
			}
		}
	}
	return 0;
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	08 95       	ret

000003f0 <startPlayer>:

int startPlayer(){
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	61 97       	sbiw	r28, 0x11	; 17
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
	short int choose;
	char messageBuf[17];
	lcd_clr();
 408:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
	lcd_pos(0,0);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
	sprintf(messageBuf, "%s", "Choose a song:");
 414:	8f e0       	ldi	r24, 0x0F	; 15
 416:	e6 ed       	ldi	r30, 0xD6	; 214
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	de 01       	movw	r26, r28
 41c:	11 96       	adiw	r26, 0x01	; 1
 41e:	01 90       	ld	r0, Z+
 420:	0d 92       	st	X+, r0
 422:	8a 95       	dec	r24
 424:	e1 f7       	brne	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	lcd_puts(messageBuf);
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	avr_wait(30000);
 42e:	80 e3       	ldi	r24, 0x30	; 48
 430:	95 e7       	ldi	r25, 0x75	; 117
 432:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
	lcd_clr();
 436:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
	do {
		lcd_pos(0,0);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
		sprintf(messageBuf, "%s", "1 = Twinkle");
 442:	8c e0       	ldi	r24, 0x0C	; 12
 444:	e5 ee       	ldi	r30, 0xE5	; 229
 446:	f1 e0       	ldi	r31, 0x01	; 1
 448:	de 01       	movw	r26, r28
 44a:	11 96       	adiw	r26, 0x01	; 1
 44c:	01 90       	ld	r0, Z+
 44e:	0d 92       	st	X+, r0
 450:	8a 95       	dec	r24
 452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		lcd_puts(messageBuf);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
		lcd_pos(1,0);
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
		sprintf(messageBuf, "%s", "2 = Mario");
 464:	8a e0       	ldi	r24, 0x0A	; 10
 466:	e1 ef       	ldi	r30, 0xF1	; 241
 468:	f1 e0       	ldi	r31, 0x01	; 1
 46a:	de 01       	movw	r26, r28
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	01 90       	ld	r0, Z+
 470:	0d 92       	st	X+, r0
 472:	8a 95       	dec	r24
 474:	e1 f7       	brne	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		lcd_puts(messageBuf);
 476:	ce 01       	movw	r24, r28
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
		avr_wait(100);
 47e:	84 e6       	ldi	r24, 0x64	; 100
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
		choose = get_key();
 486:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <get_key>
 48a:	8c 01       	movw	r16, r24
	} while (choose!=1 && choose!=2);
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	02 97       	sbiw	r24, 0x02	; 2
 490:	a0 f6       	brcc	.-88     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	lcd_clr();
 492:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
	if(choose == 1){
 496:	01 30       	cpi	r16, 0x01	; 1
 498:	11 05       	cpc	r17, r1
 49a:	c1 f4       	brne	.+48     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		song_name = 1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <song_name+0x1>
 4a4:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <song_name>
		lcd_pos(0,0);
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
		sprintf(messageBuf, "%s", "1 = Twinkle");
 4b0:	8c e0       	ldi	r24, 0x0C	; 12
 4b2:	e5 ee       	ldi	r30, 0xE5	; 229
 4b4:	f1 e0       	ldi	r31, 0x01	; 1
 4b6:	de 01       	movw	r26, r28
 4b8:	11 96       	adiw	r26, 0x01	; 1
 4ba:	01 90       	ld	r0, Z+
 4bc:	0d 92       	st	X+, r0
 4be:	8a 95       	dec	r24
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		lcd_puts(messageBuf);
 4c2:	ce 01       	movw	r24, r28
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
 4ca:	1a c0       	rjmp	.+52     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
	}
	else if (choose == 2){
 4cc:	02 30       	cpi	r16, 0x02	; 2
 4ce:	11 05       	cpc	r17, r1
 4d0:	b9 f4       	brne	.+46     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		song_name = 2;
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <song_name+0x1>
 4da:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <song_name>
		lcd_pos(0,0);
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
		sprintf(messageBuf, "%s", "2 = Mario");
 4e6:	8a e0       	ldi	r24, 0x0A	; 10
 4e8:	e1 ef       	ldi	r30, 0xF1	; 241
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	de 01       	movw	r26, r28
 4ee:	11 96       	adiw	r26, 0x01	; 1
 4f0:	01 90       	ld	r0, Z+
 4f2:	0d 92       	st	X+, r0
 4f4:	8a 95       	dec	r24
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		lcd_puts(messageBuf);
 4f8:	ce 01       	movw	r24, r28
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	}
	return choose;
}
 500:	c8 01       	movw	r24, r16
 502:	61 96       	adiw	r28, 0x11	; 17
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <main>:
	
	return 1;
}

int main()
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
 520:	61 97       	sbiw	r28, 0x11	; 17
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
#include "avr.h"


void avr_init(void)
{
	WDTCR = 15;
 52c:	8f e0       	ldi	r24, 0x0F	; 15
 52e:	81 bd       	out	0x21, r24	; 33
	avr_init();
	lcd_init();
 530:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_init>
	DDRA = 0x1F;
 534:	8f e1       	ldi	r24, 0x1F	; 31
 536:	8a bb       	out	0x1a, r24	; 26
	melody = 43;
 538:	8b e2       	ldi	r24, 0x2B	; 43
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 540:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
	char messageBuf[17];
	sprintf(messageBuf, "%s", "Choose a song:");
 544:	8f e0       	ldi	r24, 0x0F	; 15
 546:	e6 ed       	ldi	r30, 0xD6	; 214
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	de 01       	movw	r26, r28
 54c:	11 96       	adiw	r26, 0x01	; 1
 54e:	01 90       	ld	r0, Z+
 550:	0d 92       	st	X+, r0
 552:	8a 95       	dec	r24
 554:	e1 f7       	brne	.-8      	; 0x54e <main+0x36>
	lcd_puts(messageBuf);
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	avr_wait(30000);
 55e:	80 e3       	ldi	r24, 0x30	; 48
 560:	95 e7       	ldi	r25, 0x75	; 117
 562:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
	lcd_clr();
 566:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
	int chooseSong = startPlayer();
 56a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <startPlayer>
 56e:	8c 01       	movw	r16, r24
	
	while (1)
	{
		if(chooseSong == 1)
 570:	01 30       	cpi	r16, 0x01	; 1
 572:	11 05       	cpc	r17, r1
 574:	09 f0       	breq	.+2      	; 0x578 <main+0x60>
 576:	18 c1       	rjmp	.+560    	; 0x7a8 <main+0x290>
		{
			if (melody < 43)
 578:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 57c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 580:	8b 32       	cpi	r24, 0x2B	; 43
 582:	91 05       	cpc	r25, r1
 584:	0c f0       	brlt	.+2      	; 0x588 <main+0x70>
 586:	65 c0       	rjmp	.+202    	; 0x652 <main+0x13a>
			{
				struct Note note = song1[melody];
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	fc 01       	movw	r30, r24
 592:	eb 5f       	subi	r30, 0xFB	; 251
 594:	fe 4f       	sbci	r31, 0xFE	; 254
 596:	e0 80       	ld	r14, Z
 598:	f1 80       	ldd	r15, Z+1	; 0x01
				play_note(FREQUENCY[note.frequency] , DURATION / DURATION_MODIFIER[note.duration]);
 59a:	02 80       	ldd	r0, Z+2	; 0x02
 59c:	f3 81       	ldd	r31, Z+3	; 0x03
 59e:	e0 2d       	mov	r30, r0
 5a0:	ee 0f       	add	r30, r30
 5a2:	ff 1f       	adc	r31, r31
 5a4:	e9 58       	subi	r30, 0x89	; 137
 5a6:	ff 4f       	sbci	r31, 0xFF	; 255
 5a8:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <DURATION>
 5ac:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <DURATION+0x1>
 5b0:	60 81       	ld	r22, Z
 5b2:	71 81       	ldd	r23, Z+1	; 0x01
 5b4:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 5b8:	f7 01       	movw	r30, r14
 5ba:	ee 0f       	add	r30, r30
 5bc:	ff 1f       	adc	r31, r31
 5be:	e3 58       	subi	r30, 0x83	; 131
 5c0:	ff 4f       	sbci	r31, 0xFF	; 255
 5c2:	80 81       	ld	r24, Z
 5c4:	91 81       	ldd	r25, Z+1	; 0x01
 5c6:	0e 94 cc 00 	call	0x198	; 0x198 <play_note>
				if(note.frequency == 3)
 5ca:	23 e0       	ldi	r18, 0x03	; 3
 5cc:	e2 16       	cp	r14, r18
 5ce:	f1 04       	cpc	r15, r1
 5d0:	59 f4       	brne	.+22     	; 0x5e8 <main+0xd0>
				{
					SET_BIT(PORTA, 1);
 5d2:	d9 9a       	sbi	0x1b, 1	; 27
					avr_wait(600);
 5d4:	88 e5       	ldi	r24, 0x58	; 88
 5d6:	92 e0       	ldi	r25, 0x02	; 2
 5d8:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
					CLR_BIT(PORTA, 1);
 5dc:	d9 98       	cbi	0x1b, 1	; 27
					avr_wait(500);
 5de:	84 ef       	ldi	r24, 0xF4	; 244
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
 5e6:	2c c0       	rjmp	.+88     	; 0x640 <main+0x128>
				}
				else if(note.frequency == 5)
 5e8:	85 e0       	ldi	r24, 0x05	; 5
 5ea:	e8 16       	cp	r14, r24
 5ec:	f1 04       	cpc	r15, r1
 5ee:	59 f4       	brne	.+22     	; 0x606 <main+0xee>
				{
					SET_BIT(PORTA, 2);
 5f0:	da 9a       	sbi	0x1b, 2	; 27
					avr_wait(600);
 5f2:	88 e5       	ldi	r24, 0x58	; 88
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
					CLR_BIT(PORTA, 2);
 5fa:	da 98       	cbi	0x1b, 2	; 27
					avr_wait(500);
 5fc:	84 ef       	ldi	r24, 0xF4	; 244
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
 604:	1d c0       	rjmp	.+58     	; 0x640 <main+0x128>
				}
				else if(note.frequency == 7)
 606:	27 e0       	ldi	r18, 0x07	; 7
 608:	e2 16       	cp	r14, r18
 60a:	f1 04       	cpc	r15, r1
 60c:	59 f4       	brne	.+22     	; 0x624 <main+0x10c>
				{
					SET_BIT(PORTA, 3);
 60e:	db 9a       	sbi	0x1b, 3	; 27
					avr_wait(600);
 610:	88 e5       	ldi	r24, 0x58	; 88
 612:	92 e0       	ldi	r25, 0x02	; 2
 614:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
					CLR_BIT(PORTA, 3);
 618:	db 98       	cbi	0x1b, 3	; 27
					avr_wait(500);
 61a:	84 ef       	ldi	r24, 0xF4	; 244
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
 622:	0e c0       	rjmp	.+28     	; 0x640 <main+0x128>
				}
				else if(note.frequency == 10)
 624:	8a e0       	ldi	r24, 0x0A	; 10
 626:	e8 16       	cp	r14, r24
 628:	f1 04       	cpc	r15, r1
 62a:	51 f4       	brne	.+20     	; 0x640 <main+0x128>
				{
					SET_BIT(PORTA, 4);
 62c:	dc 9a       	sbi	0x1b, 4	; 27
					avr_wait(600);
 62e:	88 e5       	ldi	r24, 0x58	; 88
 630:	92 e0       	ldi	r25, 0x02	; 2
 632:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
					CLR_BIT(PORTA, 4);
 636:	dc 98       	cbi	0x1b, 4	; 27
					avr_wait(500);
 638:	84 ef       	ldi	r24, 0xF4	; 244
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
				}
				melody += 1;
 640:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 644:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 64e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			}
			
			int key = get_key() - 1;
 652:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <get_key>
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	08 f4       	brcc	.+2      	; 0x65c <main+0x144>
 65a:	8a cf       	rjmp	.-236    	; 0x570 <main+0x58>
			if (key == -1)
			{
			}
			else if (keypad[key] == '*')
 65c:	fc 01       	movw	r30, r24
 65e:	e0 5a       	subi	r30, 0xA0	; 160
 660:	ff 4f       	sbci	r31, 0xFF	; 255
 662:	80 81       	ld	r24, Z
 664:	8a 32       	cpi	r24, 0x2A	; 42
 666:	19 f5       	brne	.+70     	; 0x6ae <main+0x196>
			{
				if (0 < TH_TL_MODIFIER)
 668:	c0 90 71 00 	lds	r12, 0x0071	; 0x800071 <TH_TL_MODIFIER>
 66c:	d0 90 72 00 	lds	r13, 0x0072	; 0x800072 <TH_TL_MODIFIER+0x1>
 670:	e0 90 73 00 	lds	r14, 0x0073	; 0x800073 <TH_TL_MODIFIER+0x2>
 674:	f0 90 74 00 	lds	r15, 0x0074	; 0x800074 <TH_TL_MODIFIER+0x3>
 678:	20 e0       	ldi	r18, 0x00	; 0
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	a9 01       	movw	r20, r18
 67e:	c7 01       	movw	r24, r14
 680:	b6 01       	movw	r22, r12
 682:	0e 94 10 07 	call	0xe20	; 0xe20 <__gesf2>
 686:	18 16       	cp	r1, r24
 688:	0c f0       	brlt	.+2      	; 0x68c <main+0x174>
 68a:	72 cf       	rjmp	.-284    	; 0x570 <main+0x58>
				{
					TH_TL_MODIFIER -= .25;
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	40 e8       	ldi	r20, 0x80	; 128
 692:	5e e3       	ldi	r21, 0x3E	; 62
 694:	c7 01       	movw	r24, r14
 696:	b6 01       	movw	r22, r12
 698:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__subsf3>
 69c:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <TH_TL_MODIFIER>
 6a0:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <TH_TL_MODIFIER+0x1>
 6a4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TH_TL_MODIFIER+0x2>
 6a8:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <TH_TL_MODIFIER+0x3>
 6ac:	61 cf       	rjmp	.-318    	; 0x570 <main+0x58>
				}
			}
			else if (keypad[key] == '0')
 6ae:	80 33       	cpi	r24, 0x30	; 48
 6b0:	21 f5       	brne	.+72     	; 0x6fa <main+0x1e2>
			{
				if (TH_TL_MODIFIER < 2.0)
 6b2:	c0 90 71 00 	lds	r12, 0x0071	; 0x800071 <TH_TL_MODIFIER>
 6b6:	d0 90 72 00 	lds	r13, 0x0072	; 0x800072 <TH_TL_MODIFIER+0x1>
 6ba:	e0 90 73 00 	lds	r14, 0x0073	; 0x800073 <TH_TL_MODIFIER+0x2>
 6be:	f0 90 74 00 	lds	r15, 0x0074	; 0x800074 <TH_TL_MODIFIER+0x3>
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	50 e4       	ldi	r21, 0x40	; 64
 6ca:	c7 01       	movw	r24, r14
 6cc:	b6 01       	movw	r22, r12
 6ce:	0e 94 70 05 	call	0xae0	; 0xae0 <__cmpsf2>
 6d2:	88 23       	and	r24, r24
 6d4:	0c f0       	brlt	.+2      	; 0x6d8 <main+0x1c0>
 6d6:	4c cf       	rjmp	.-360    	; 0x570 <main+0x58>
				{
					TH_TL_MODIFIER += .25;
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	40 e8       	ldi	r20, 0x80	; 128
 6de:	5e e3       	ldi	r21, 0x3E	; 62
 6e0:	c7 01       	movw	r24, r14
 6e2:	b6 01       	movw	r22, r12
 6e4:	0e 94 ed 04 	call	0x9da	; 0x9da <__addsf3>
 6e8:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <TH_TL_MODIFIER>
 6ec:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <TH_TL_MODIFIER+0x1>
 6f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TH_TL_MODIFIER+0x2>
 6f4:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <TH_TL_MODIFIER+0x3>
 6f8:	3b cf       	rjmp	.-394    	; 0x570 <main+0x58>
				}
			}
			else if (keypad[key] == '#')
 6fa:	83 32       	cpi	r24, 0x23	; 35
 6fc:	71 f4       	brne	.+28     	; 0x71a <main+0x202>
			{
				if (10 < DURATION)
 6fe:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <DURATION>
 702:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <DURATION+0x1>
 706:	8b 30       	cpi	r24, 0x0B	; 11
 708:	91 05       	cpc	r25, r1
 70a:	0c f4       	brge	.+2      	; 0x70e <main+0x1f6>
 70c:	31 cf       	rjmp	.-414    	; 0x570 <main+0x58>
				{
					DURATION -= 20;
 70e:	44 97       	sbiw	r24, 0x14	; 20
 710:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <DURATION+0x1>
 714:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <DURATION>
 718:	2b cf       	rjmp	.-426    	; 0x570 <main+0x58>
				}
			}
			else if (keypad[key] == 'D')
 71a:	84 34       	cpi	r24, 0x44	; 68
 71c:	79 f4       	brne	.+30     	; 0x73c <main+0x224>
			{
				if(380 > DURATION)
 71e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <DURATION>
 722:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <DURATION+0x1>
 726:	8c 37       	cpi	r24, 0x7C	; 124
 728:	21 e0       	ldi	r18, 0x01	; 1
 72a:	92 07       	cpc	r25, r18
 72c:	0c f0       	brlt	.+2      	; 0x730 <main+0x218>
 72e:	20 cf       	rjmp	.-448    	; 0x570 <main+0x58>
				{
					DURATION += 20;
 730:	44 96       	adiw	r24, 0x14	; 20
 732:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <DURATION+0x1>
 736:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <DURATION>
 73a:	1a cf       	rjmp	.-460    	; 0x570 <main+0x58>
				}
				
			}
			else if (keypad[key] == 'A')
 73c:	81 34       	cpi	r24, 0x41	; 65
 73e:	79 f5       	brne	.+94     	; 0x79e <main+0x286>
			{
				lcd_clr();
 740:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
				lcd_pos(0,0);
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
				sprintf(messageBuf, "%s", "Stopped!!!");
 74c:	8b e0       	ldi	r24, 0x0B	; 11
 74e:	eb ef       	ldi	r30, 0xFB	; 251
 750:	f1 e0       	ldi	r31, 0x01	; 1
 752:	de 01       	movw	r26, r28
 754:	11 96       	adiw	r26, 0x01	; 1
 756:	01 90       	ld	r0, Z+
 758:	0d 92       	st	X+, r0
 75a:	8a 95       	dec	r24
 75c:	e1 f7       	brne	.-8      	; 0x756 <main+0x23e>
				lcd_puts(messageBuf);
 75e:	ce 01       	movw	r24, r28
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				lcd_pos(1,0);
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
				sprintf(messageBuf, "%s", "Replaying...");
 76e:	8d e0       	ldi	r24, 0x0D	; 13
 770:	e6 e0       	ldi	r30, 0x06	; 6
 772:	f2 e0       	ldi	r31, 0x02	; 2
 774:	de 01       	movw	r26, r28
 776:	11 96       	adiw	r26, 0x01	; 1
 778:	01 90       	ld	r0, Z+
 77a:	0d 92       	st	X+, r0
 77c:	8a 95       	dec	r24
 77e:	e1 f7       	brne	.-8      	; 0x778 <main+0x260>
				lcd_puts(messageBuf);
 780:	ce 01       	movw	r24, r28
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				avr_wait(30000);
 788:	80 e3       	ldi	r24, 0x30	; 48
 78a:	95 e7       	ldi	r25, 0x75	; 117
 78c:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
				lcd_clr();
 790:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
				melody = 0;
 794:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
 798:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
 79c:	e9 ce       	rjmp	.-558    	; 0x570 <main+0x58>
			}
			else
			melody = 0;
 79e:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
 7a2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
 7a6:	e4 ce       	rjmp	.-568    	; 0x570 <main+0x58>
		}
		else 
		{
			if (melody < 13)
 7a8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 7ac:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 7b0:	8d 30       	cpi	r24, 0x0D	; 13
 7b2:	91 05       	cpc	r25, r1
 7b4:	0c f0       	brlt	.+2      	; 0x7b8 <main+0x2a0>
 7b6:	65 c0       	rjmp	.+202    	; 0x882 <__stack+0x23>
			{
				struct Note note = song2[melody];
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	fc 01       	movw	r30, r24
 7c2:	ef 52       	subi	r30, 0x2F	; 47
 7c4:	ff 4f       	sbci	r31, 0xFF	; 255
 7c6:	e0 80       	ld	r14, Z
 7c8:	f1 80       	ldd	r15, Z+1	; 0x01
				play_note(FREQUENCY[note.frequency] , DURATION / DURATION_MODIFIER[note.duration]);
 7ca:	02 80       	ldd	r0, Z+2	; 0x02
 7cc:	f3 81       	ldd	r31, Z+3	; 0x03
 7ce:	e0 2d       	mov	r30, r0
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	e9 58       	subi	r30, 0x89	; 137
 7d6:	ff 4f       	sbci	r31, 0xFF	; 255
 7d8:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <DURATION>
 7dc:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <DURATION+0x1>
 7e0:	60 81       	ld	r22, Z
 7e2:	71 81       	ldd	r23, Z+1	; 0x01
 7e4:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 7e8:	f7 01       	movw	r30, r14
 7ea:	ee 0f       	add	r30, r30
 7ec:	ff 1f       	adc	r31, r31
 7ee:	e3 58       	subi	r30, 0x83	; 131
 7f0:	ff 4f       	sbci	r31, 0xFF	; 255
 7f2:	80 81       	ld	r24, Z
 7f4:	91 81       	ldd	r25, Z+1	; 0x01
 7f6:	0e 94 cc 00 	call	0x198	; 0x198 <play_note>
				if(note.frequency == 3)
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	e8 16       	cp	r14, r24
 7fe:	f1 04       	cpc	r15, r1
 800:	59 f4       	brne	.+22     	; 0x818 <main+0x300>
				{
					SET_BIT(PORTA, 1);
 802:	d9 9a       	sbi	0x1b, 1	; 27
					avr_wait(600);
 804:	88 e5       	ldi	r24, 0x58	; 88
 806:	92 e0       	ldi	r25, 0x02	; 2
 808:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
					CLR_BIT(PORTA, 1);
 80c:	d9 98       	cbi	0x1b, 1	; 27
					avr_wait(500);
 80e:	84 ef       	ldi	r24, 0xF4	; 244
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
 816:	2c c0       	rjmp	.+88     	; 0x870 <__stack+0x11>
				}
				else if(note.frequency == 5)
 818:	25 e0       	ldi	r18, 0x05	; 5
 81a:	e2 16       	cp	r14, r18
 81c:	f1 04       	cpc	r15, r1
 81e:	59 f4       	brne	.+22     	; 0x836 <main+0x31e>
				{
					SET_BIT(PORTA, 2);
 820:	da 9a       	sbi	0x1b, 2	; 27
					avr_wait(600);
 822:	88 e5       	ldi	r24, 0x58	; 88
 824:	92 e0       	ldi	r25, 0x02	; 2
 826:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
					CLR_BIT(PORTA, 2);
 82a:	da 98       	cbi	0x1b, 2	; 27
					avr_wait(500);
 82c:	84 ef       	ldi	r24, 0xF4	; 244
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
 834:	1d c0       	rjmp	.+58     	; 0x870 <__stack+0x11>
				}
				else if(note.frequency == 7)
 836:	87 e0       	ldi	r24, 0x07	; 7
 838:	e8 16       	cp	r14, r24
 83a:	f1 04       	cpc	r15, r1
 83c:	59 f4       	brne	.+22     	; 0x854 <main+0x33c>
				{
					SET_BIT(PORTA, 3);
 83e:	db 9a       	sbi	0x1b, 3	; 27
					avr_wait(600);
 840:	88 e5       	ldi	r24, 0x58	; 88
 842:	92 e0       	ldi	r25, 0x02	; 2
 844:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
					CLR_BIT(PORTA, 3);
 848:	db 98       	cbi	0x1b, 3	; 27
					avr_wait(500);
 84a:	84 ef       	ldi	r24, 0xF4	; 244
 84c:	91 e0       	ldi	r25, 0x01	; 1
 84e:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
 852:	0e c0       	rjmp	.+28     	; 0x870 <__stack+0x11>
				}
				else if(note.frequency == 10)
 854:	2a e0       	ldi	r18, 0x0A	; 10
 856:	e2 16       	cp	r14, r18
 858:	f1 04       	cpc	r15, r1
 85a:	51 f4       	brne	.+20     	; 0x870 <__stack+0x11>
				{
					SET_BIT(PORTA, 4);
 85c:	dc 9a       	sbi	0x1b, 4	; 27
					avr_wait(600);
 85e:	88 e5       	ldi	r24, 0x58	; 88
 860:	92 e0       	ldi	r25, 0x02	; 2
 862:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
					CLR_BIT(PORTA, 4);
 866:	dc 98       	cbi	0x1b, 4	; 27
					avr_wait(500);
 868:	84 ef       	ldi	r24, 0xF4	; 244
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
				}
				melody += 1;
 870:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 874:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x1>
 878:	01 96       	adiw	r24, 0x01	; 1
 87a:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
 87e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			}
			
			int key = get_key() - 1;
 882:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <get_key>
 886:	01 97       	sbiw	r24, 0x01	; 1
 888:	08 f4       	brcc	.+2      	; 0x88c <__stack+0x2d>
 88a:	72 ce       	rjmp	.-796    	; 0x570 <main+0x58>
			if (key == -1)
			{
			}
			else if (keypad[key] == '*')
 88c:	fc 01       	movw	r30, r24
 88e:	e0 5a       	subi	r30, 0xA0	; 160
 890:	ff 4f       	sbci	r31, 0xFF	; 255
 892:	80 81       	ld	r24, Z
 894:	8a 32       	cpi	r24, 0x2A	; 42
 896:	19 f5       	brne	.+70     	; 0x8de <__stack+0x7f>
			{
				if (0 < TH_TL_MODIFIER)
 898:	c0 90 71 00 	lds	r12, 0x0071	; 0x800071 <TH_TL_MODIFIER>
 89c:	d0 90 72 00 	lds	r13, 0x0072	; 0x800072 <TH_TL_MODIFIER+0x1>
 8a0:	e0 90 73 00 	lds	r14, 0x0073	; 0x800073 <TH_TL_MODIFIER+0x2>
 8a4:	f0 90 74 00 	lds	r15, 0x0074	; 0x800074 <TH_TL_MODIFIER+0x3>
 8a8:	20 e0       	ldi	r18, 0x00	; 0
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	a9 01       	movw	r20, r18
 8ae:	c7 01       	movw	r24, r14
 8b0:	b6 01       	movw	r22, r12
 8b2:	0e 94 10 07 	call	0xe20	; 0xe20 <__gesf2>
 8b6:	18 16       	cp	r1, r24
 8b8:	0c f0       	brlt	.+2      	; 0x8bc <__stack+0x5d>
 8ba:	5a ce       	rjmp	.-844    	; 0x570 <main+0x58>
				{
					TH_TL_MODIFIER -= .25;
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	40 e8       	ldi	r20, 0x80	; 128
 8c2:	5e e3       	ldi	r21, 0x3E	; 62
 8c4:	c7 01       	movw	r24, r14
 8c6:	b6 01       	movw	r22, r12
 8c8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__subsf3>
 8cc:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <TH_TL_MODIFIER>
 8d0:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <TH_TL_MODIFIER+0x1>
 8d4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TH_TL_MODIFIER+0x2>
 8d8:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <TH_TL_MODIFIER+0x3>
 8dc:	49 ce       	rjmp	.-878    	; 0x570 <main+0x58>
				}
			}
			else if (keypad[key] == '0')
 8de:	80 33       	cpi	r24, 0x30	; 48
 8e0:	21 f5       	brne	.+72     	; 0x92a <__stack+0xcb>
			{
				if (TH_TL_MODIFIER < 2.0)
 8e2:	c0 90 71 00 	lds	r12, 0x0071	; 0x800071 <TH_TL_MODIFIER>
 8e6:	d0 90 72 00 	lds	r13, 0x0072	; 0x800072 <TH_TL_MODIFIER+0x1>
 8ea:	e0 90 73 00 	lds	r14, 0x0073	; 0x800073 <TH_TL_MODIFIER+0x2>
 8ee:	f0 90 74 00 	lds	r15, 0x0074	; 0x800074 <TH_TL_MODIFIER+0x3>
 8f2:	20 e0       	ldi	r18, 0x00	; 0
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	40 e0       	ldi	r20, 0x00	; 0
 8f8:	50 e4       	ldi	r21, 0x40	; 64
 8fa:	c7 01       	movw	r24, r14
 8fc:	b6 01       	movw	r22, r12
 8fe:	0e 94 70 05 	call	0xae0	; 0xae0 <__cmpsf2>
 902:	88 23       	and	r24, r24
 904:	0c f0       	brlt	.+2      	; 0x908 <__stack+0xa9>
 906:	34 ce       	rjmp	.-920    	; 0x570 <main+0x58>
				{
					TH_TL_MODIFIER += .25;
 908:	20 e0       	ldi	r18, 0x00	; 0
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	40 e8       	ldi	r20, 0x80	; 128
 90e:	5e e3       	ldi	r21, 0x3E	; 62
 910:	c7 01       	movw	r24, r14
 912:	b6 01       	movw	r22, r12
 914:	0e 94 ed 04 	call	0x9da	; 0x9da <__addsf3>
 918:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <TH_TL_MODIFIER>
 91c:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <TH_TL_MODIFIER+0x1>
 920:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TH_TL_MODIFIER+0x2>
 924:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <TH_TL_MODIFIER+0x3>
 928:	23 ce       	rjmp	.-954    	; 0x570 <main+0x58>
				}
			}
			else if (keypad[key] == '#')
 92a:	83 32       	cpi	r24, 0x23	; 35
 92c:	71 f4       	brne	.+28     	; 0x94a <__stack+0xeb>
			{
				if (10 < DURATION)
 92e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <DURATION>
 932:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <DURATION+0x1>
 936:	8b 30       	cpi	r24, 0x0B	; 11
 938:	91 05       	cpc	r25, r1
 93a:	0c f4       	brge	.+2      	; 0x93e <__stack+0xdf>
 93c:	19 ce       	rjmp	.-974    	; 0x570 <main+0x58>
				{
					DURATION -= 20;
 93e:	44 97       	sbiw	r24, 0x14	; 20
 940:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <DURATION+0x1>
 944:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <DURATION>
 948:	13 ce       	rjmp	.-986    	; 0x570 <main+0x58>
				}
			}
			else if (keypad[key] == 'D')
 94a:	84 34       	cpi	r24, 0x44	; 68
 94c:	79 f4       	brne	.+30     	; 0x96c <__stack+0x10d>
			{
				if(380 > DURATION)
 94e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <DURATION>
 952:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <DURATION+0x1>
 956:	8c 37       	cpi	r24, 0x7C	; 124
 958:	21 e0       	ldi	r18, 0x01	; 1
 95a:	92 07       	cpc	r25, r18
 95c:	0c f0       	brlt	.+2      	; 0x960 <__stack+0x101>
 95e:	08 ce       	rjmp	.-1008   	; 0x570 <main+0x58>
				{
					DURATION += 20;
 960:	44 96       	adiw	r24, 0x14	; 20
 962:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <DURATION+0x1>
 966:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <DURATION>
 96a:	02 ce       	rjmp	.-1020   	; 0x570 <main+0x58>
				}
			}
			else if (keypad[key] == 'A')
 96c:	81 34       	cpi	r24, 0x41	; 65
 96e:	79 f5       	brne	.+94     	; 0x9ce <__stack+0x16f>
			{
				lcd_clr();
 970:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
				lcd_pos(0,0);
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
				sprintf(messageBuf, "%s", "Stopped!!!");
 97c:	8b e0       	ldi	r24, 0x0B	; 11
 97e:	eb ef       	ldi	r30, 0xFB	; 251
 980:	f1 e0       	ldi	r31, 0x01	; 1
 982:	de 01       	movw	r26, r28
 984:	11 96       	adiw	r26, 0x01	; 1
 986:	01 90       	ld	r0, Z+
 988:	0d 92       	st	X+, r0
 98a:	8a 95       	dec	r24
 98c:	e1 f7       	brne	.-8      	; 0x986 <__stack+0x127>
				lcd_puts(messageBuf);
 98e:	ce 01       	movw	r24, r28
 990:	01 96       	adiw	r24, 0x01	; 1
 992:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				lcd_pos(1,0);
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
				sprintf(messageBuf, "%s", "Replaying...");
 99e:	8d e0       	ldi	r24, 0x0D	; 13
 9a0:	e6 e0       	ldi	r30, 0x06	; 6
 9a2:	f2 e0       	ldi	r31, 0x02	; 2
 9a4:	de 01       	movw	r26, r28
 9a6:	11 96       	adiw	r26, 0x01	; 1
 9a8:	01 90       	ld	r0, Z+
 9aa:	0d 92       	st	X+, r0
 9ac:	8a 95       	dec	r24
 9ae:	e1 f7       	brne	.-8      	; 0x9a8 <__stack+0x149>
				lcd_puts(messageBuf);
 9b0:	ce 01       	movw	r24, r28
 9b2:	01 96       	adiw	r24, 0x01	; 1
 9b4:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				avr_wait(30000);
 9b8:	80 e3       	ldi	r24, 0x30	; 48
 9ba:	95 e7       	ldi	r25, 0x75	; 117
 9bc:	0e 94 68 00 	call	0xd0	; 0xd0 <avr_wait>
				lcd_clr();
 9c0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
				melody = 0;
 9c4:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
 9c8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
 9cc:	d1 cd       	rjmp	.-1118   	; 0x570 <main+0x58>
			}
			else
			melody = 0;
 9ce:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x1>
 9d2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
 9d6:	cc cd       	rjmp	.-1128   	; 0x570 <main+0x58>

000009d8 <__subsf3>:
 9d8:	50 58       	subi	r21, 0x80	; 128

000009da <__addsf3>:
 9da:	bb 27       	eor	r27, r27
 9dc:	aa 27       	eor	r26, r26
 9de:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3x>
 9e2:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_round>
 9e6:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscA>
 9ea:	38 f0       	brcs	.+14     	; 0x9fa <__addsf3+0x20>
 9ec:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_pscB>
 9f0:	20 f0       	brcs	.+8      	; 0x9fa <__addsf3+0x20>
 9f2:	39 f4       	brne	.+14     	; 0xa02 <__addsf3+0x28>
 9f4:	9f 3f       	cpi	r25, 0xFF	; 255
 9f6:	19 f4       	brne	.+6      	; 0x9fe <__addsf3+0x24>
 9f8:	26 f4       	brtc	.+8      	; 0xa02 <__addsf3+0x28>
 9fa:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_nan>
 9fe:	0e f4       	brtc	.+2      	; 0xa02 <__addsf3+0x28>
 a00:	e0 95       	com	r30
 a02:	e7 fb       	bst	r30, 7
 a04:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_inf>

00000a08 <__addsf3x>:
 a08:	e9 2f       	mov	r30, r25
 a0a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_split3>
 a0e:	58 f3       	brcs	.-42     	; 0x9e6 <__addsf3+0xc>
 a10:	ba 17       	cp	r27, r26
 a12:	62 07       	cpc	r22, r18
 a14:	73 07       	cpc	r23, r19
 a16:	84 07       	cpc	r24, r20
 a18:	95 07       	cpc	r25, r21
 a1a:	20 f0       	brcs	.+8      	; 0xa24 <__addsf3x+0x1c>
 a1c:	79 f4       	brne	.+30     	; 0xa3c <__addsf3x+0x34>
 a1e:	a6 f5       	brtc	.+104    	; 0xa88 <__addsf3x+0x80>
 a20:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_zero>
 a24:	0e f4       	brtc	.+2      	; 0xa28 <__addsf3x+0x20>
 a26:	e0 95       	com	r30
 a28:	0b 2e       	mov	r0, r27
 a2a:	ba 2f       	mov	r27, r26
 a2c:	a0 2d       	mov	r26, r0
 a2e:	0b 01       	movw	r0, r22
 a30:	b9 01       	movw	r22, r18
 a32:	90 01       	movw	r18, r0
 a34:	0c 01       	movw	r0, r24
 a36:	ca 01       	movw	r24, r20
 a38:	a0 01       	movw	r20, r0
 a3a:	11 24       	eor	r1, r1
 a3c:	ff 27       	eor	r31, r31
 a3e:	59 1b       	sub	r21, r25
 a40:	99 f0       	breq	.+38     	; 0xa68 <__addsf3x+0x60>
 a42:	59 3f       	cpi	r21, 0xF9	; 249
 a44:	50 f4       	brcc	.+20     	; 0xa5a <__addsf3x+0x52>
 a46:	50 3e       	cpi	r21, 0xE0	; 224
 a48:	68 f1       	brcs	.+90     	; 0xaa4 <__addsf3x+0x9c>
 a4a:	1a 16       	cp	r1, r26
 a4c:	f0 40       	sbci	r31, 0x00	; 0
 a4e:	a2 2f       	mov	r26, r18
 a50:	23 2f       	mov	r18, r19
 a52:	34 2f       	mov	r19, r20
 a54:	44 27       	eor	r20, r20
 a56:	58 5f       	subi	r21, 0xF8	; 248
 a58:	f3 cf       	rjmp	.-26     	; 0xa40 <__addsf3x+0x38>
 a5a:	46 95       	lsr	r20
 a5c:	37 95       	ror	r19
 a5e:	27 95       	ror	r18
 a60:	a7 95       	ror	r26
 a62:	f0 40       	sbci	r31, 0x00	; 0
 a64:	53 95       	inc	r21
 a66:	c9 f7       	brne	.-14     	; 0xa5a <__addsf3x+0x52>
 a68:	7e f4       	brtc	.+30     	; 0xa88 <__addsf3x+0x80>
 a6a:	1f 16       	cp	r1, r31
 a6c:	ba 0b       	sbc	r27, r26
 a6e:	62 0b       	sbc	r22, r18
 a70:	73 0b       	sbc	r23, r19
 a72:	84 0b       	sbc	r24, r20
 a74:	ba f0       	brmi	.+46     	; 0xaa4 <__addsf3x+0x9c>
 a76:	91 50       	subi	r25, 0x01	; 1
 a78:	a1 f0       	breq	.+40     	; 0xaa2 <__addsf3x+0x9a>
 a7a:	ff 0f       	add	r31, r31
 a7c:	bb 1f       	adc	r27, r27
 a7e:	66 1f       	adc	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	c2 f7       	brpl	.-16     	; 0xa76 <__addsf3x+0x6e>
 a86:	0e c0       	rjmp	.+28     	; 0xaa4 <__addsf3x+0x9c>
 a88:	ba 0f       	add	r27, r26
 a8a:	62 1f       	adc	r22, r18
 a8c:	73 1f       	adc	r23, r19
 a8e:	84 1f       	adc	r24, r20
 a90:	48 f4       	brcc	.+18     	; 0xaa4 <__addsf3x+0x9c>
 a92:	87 95       	ror	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	b7 95       	ror	r27
 a9a:	f7 95       	ror	r31
 a9c:	9e 3f       	cpi	r25, 0xFE	; 254
 a9e:	08 f0       	brcs	.+2      	; 0xaa2 <__addsf3x+0x9a>
 aa0:	b0 cf       	rjmp	.-160    	; 0xa02 <__addsf3+0x28>
 aa2:	93 95       	inc	r25
 aa4:	88 0f       	add	r24, r24
 aa6:	08 f0       	brcs	.+2      	; 0xaaa <__addsf3x+0xa2>
 aa8:	99 27       	eor	r25, r25
 aaa:	ee 0f       	add	r30, r30
 aac:	97 95       	ror	r25
 aae:	87 95       	ror	r24
 ab0:	08 95       	ret

00000ab2 <ceil>:
 ab2:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_trunc>
 ab6:	90 f0       	brcs	.+36     	; 0xadc <ceil+0x2a>
 ab8:	9f 37       	cpi	r25, 0x7F	; 127
 aba:	48 f4       	brcc	.+18     	; 0xace <ceil+0x1c>
 abc:	91 11       	cpse	r25, r1
 abe:	16 f4       	brtc	.+4      	; 0xac4 <ceil+0x12>
 ac0:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_szero>
 ac4:	60 e0       	ldi	r22, 0x00	; 0
 ac6:	70 e0       	ldi	r23, 0x00	; 0
 ac8:	80 e8       	ldi	r24, 0x80	; 128
 aca:	9f e3       	ldi	r25, 0x3F	; 63
 acc:	08 95       	ret
 ace:	26 f0       	brts	.+8      	; 0xad8 <ceil+0x26>
 ad0:	1b 16       	cp	r1, r27
 ad2:	61 1d       	adc	r22, r1
 ad4:	71 1d       	adc	r23, r1
 ad6:	81 1d       	adc	r24, r1
 ad8:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_mintl>
 adc:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_mpack>

00000ae0 <__cmpsf2>:
 ae0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_cmp>
 ae4:	08 f4       	brcc	.+2      	; 0xae8 <__cmpsf2+0x8>
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	08 95       	ret

00000aea <__divsf3>:
 aea:	0e 94 89 05 	call	0xb12	; 0xb12 <__divsf3x>
 aee:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_round>
 af2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_pscB>
 af6:	58 f0       	brcs	.+22     	; 0xb0e <__divsf3+0x24>
 af8:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscA>
 afc:	40 f0       	brcs	.+16     	; 0xb0e <__divsf3+0x24>
 afe:	29 f4       	brne	.+10     	; 0xb0a <__divsf3+0x20>
 b00:	5f 3f       	cpi	r21, 0xFF	; 255
 b02:	29 f0       	breq	.+10     	; 0xb0e <__divsf3+0x24>
 b04:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_inf>
 b08:	51 11       	cpse	r21, r1
 b0a:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_szero>
 b0e:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_nan>

00000b12 <__divsf3x>:
 b12:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_split3>
 b16:	68 f3       	brcs	.-38     	; 0xaf2 <__divsf3+0x8>

00000b18 <__divsf3_pse>:
 b18:	99 23       	and	r25, r25
 b1a:	b1 f3       	breq	.-20     	; 0xb08 <__divsf3+0x1e>
 b1c:	55 23       	and	r21, r21
 b1e:	91 f3       	breq	.-28     	; 0xb04 <__divsf3+0x1a>
 b20:	95 1b       	sub	r25, r21
 b22:	55 0b       	sbc	r21, r21
 b24:	bb 27       	eor	r27, r27
 b26:	aa 27       	eor	r26, r26
 b28:	62 17       	cp	r22, r18
 b2a:	73 07       	cpc	r23, r19
 b2c:	84 07       	cpc	r24, r20
 b2e:	38 f0       	brcs	.+14     	; 0xb3e <__divsf3_pse+0x26>
 b30:	9f 5f       	subi	r25, 0xFF	; 255
 b32:	5f 4f       	sbci	r21, 0xFF	; 255
 b34:	22 0f       	add	r18, r18
 b36:	33 1f       	adc	r19, r19
 b38:	44 1f       	adc	r20, r20
 b3a:	aa 1f       	adc	r26, r26
 b3c:	a9 f3       	breq	.-22     	; 0xb28 <__divsf3_pse+0x10>
 b3e:	35 d0       	rcall	.+106    	; 0xbaa <__divsf3_pse+0x92>
 b40:	0e 2e       	mov	r0, r30
 b42:	3a f0       	brmi	.+14     	; 0xb52 <__divsf3_pse+0x3a>
 b44:	e0 e8       	ldi	r30, 0x80	; 128
 b46:	32 d0       	rcall	.+100    	; 0xbac <__divsf3_pse+0x94>
 b48:	91 50       	subi	r25, 0x01	; 1
 b4a:	50 40       	sbci	r21, 0x00	; 0
 b4c:	e6 95       	lsr	r30
 b4e:	00 1c       	adc	r0, r0
 b50:	ca f7       	brpl	.-14     	; 0xb44 <__divsf3_pse+0x2c>
 b52:	2b d0       	rcall	.+86     	; 0xbaa <__divsf3_pse+0x92>
 b54:	fe 2f       	mov	r31, r30
 b56:	29 d0       	rcall	.+82     	; 0xbaa <__divsf3_pse+0x92>
 b58:	66 0f       	add	r22, r22
 b5a:	77 1f       	adc	r23, r23
 b5c:	88 1f       	adc	r24, r24
 b5e:	bb 1f       	adc	r27, r27
 b60:	26 17       	cp	r18, r22
 b62:	37 07       	cpc	r19, r23
 b64:	48 07       	cpc	r20, r24
 b66:	ab 07       	cpc	r26, r27
 b68:	b0 e8       	ldi	r27, 0x80	; 128
 b6a:	09 f0       	breq	.+2      	; 0xb6e <__divsf3_pse+0x56>
 b6c:	bb 0b       	sbc	r27, r27
 b6e:	80 2d       	mov	r24, r0
 b70:	bf 01       	movw	r22, r30
 b72:	ff 27       	eor	r31, r31
 b74:	93 58       	subi	r25, 0x83	; 131
 b76:	5f 4f       	sbci	r21, 0xFF	; 255
 b78:	3a f0       	brmi	.+14     	; 0xb88 <__divsf3_pse+0x70>
 b7a:	9e 3f       	cpi	r25, 0xFE	; 254
 b7c:	51 05       	cpc	r21, r1
 b7e:	78 f0       	brcs	.+30     	; 0xb9e <__divsf3_pse+0x86>
 b80:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_inf>
 b84:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_szero>
 b88:	5f 3f       	cpi	r21, 0xFF	; 255
 b8a:	e4 f3       	brlt	.-8      	; 0xb84 <__divsf3_pse+0x6c>
 b8c:	98 3e       	cpi	r25, 0xE8	; 232
 b8e:	d4 f3       	brlt	.-12     	; 0xb84 <__divsf3_pse+0x6c>
 b90:	86 95       	lsr	r24
 b92:	77 95       	ror	r23
 b94:	67 95       	ror	r22
 b96:	b7 95       	ror	r27
 b98:	f7 95       	ror	r31
 b9a:	9f 5f       	subi	r25, 0xFF	; 255
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__divsf3_pse+0x78>
 b9e:	88 0f       	add	r24, r24
 ba0:	91 1d       	adc	r25, r1
 ba2:	96 95       	lsr	r25
 ba4:	87 95       	ror	r24
 ba6:	97 f9       	bld	r25, 7
 ba8:	08 95       	ret
 baa:	e1 e0       	ldi	r30, 0x01	; 1
 bac:	66 0f       	add	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	bb 1f       	adc	r27, r27
 bb4:	62 17       	cp	r22, r18
 bb6:	73 07       	cpc	r23, r19
 bb8:	84 07       	cpc	r24, r20
 bba:	ba 07       	cpc	r27, r26
 bbc:	20 f0       	brcs	.+8      	; 0xbc6 <__divsf3_pse+0xae>
 bbe:	62 1b       	sub	r22, r18
 bc0:	73 0b       	sbc	r23, r19
 bc2:	84 0b       	sbc	r24, r20
 bc4:	ba 0b       	sbc	r27, r26
 bc6:	ee 1f       	adc	r30, r30
 bc8:	88 f7       	brcc	.-30     	; 0xbac <__divsf3_pse+0x94>
 bca:	e0 95       	com	r30
 bcc:	08 95       	ret

00000bce <__fixsfsi>:
 bce:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fixunssfsi>
 bd2:	68 94       	set
 bd4:	b1 11       	cpse	r27, r1
 bd6:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_szero>
 bda:	08 95       	ret

00000bdc <__fixunssfsi>:
 bdc:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_splitA>
 be0:	88 f0       	brcs	.+34     	; 0xc04 <__fixunssfsi+0x28>
 be2:	9f 57       	subi	r25, 0x7F	; 127
 be4:	98 f0       	brcs	.+38     	; 0xc0c <__fixunssfsi+0x30>
 be6:	b9 2f       	mov	r27, r25
 be8:	99 27       	eor	r25, r25
 bea:	b7 51       	subi	r27, 0x17	; 23
 bec:	b0 f0       	brcs	.+44     	; 0xc1a <__fixunssfsi+0x3e>
 bee:	e1 f0       	breq	.+56     	; 0xc28 <__fixunssfsi+0x4c>
 bf0:	66 0f       	add	r22, r22
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 1f       	adc	r24, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	1a f0       	brmi	.+6      	; 0xc00 <__fixunssfsi+0x24>
 bfa:	ba 95       	dec	r27
 bfc:	c9 f7       	brne	.-14     	; 0xbf0 <__fixunssfsi+0x14>
 bfe:	14 c0       	rjmp	.+40     	; 0xc28 <__fixunssfsi+0x4c>
 c00:	b1 30       	cpi	r27, 0x01	; 1
 c02:	91 f0       	breq	.+36     	; 0xc28 <__fixunssfsi+0x4c>
 c04:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_zero>
 c08:	b1 e0       	ldi	r27, 0x01	; 1
 c0a:	08 95       	ret
 c0c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_zero>
 c10:	67 2f       	mov	r22, r23
 c12:	78 2f       	mov	r23, r24
 c14:	88 27       	eor	r24, r24
 c16:	b8 5f       	subi	r27, 0xF8	; 248
 c18:	39 f0       	breq	.+14     	; 0xc28 <__fixunssfsi+0x4c>
 c1a:	b9 3f       	cpi	r27, 0xF9	; 249
 c1c:	cc f3       	brlt	.-14     	; 0xc10 <__fixunssfsi+0x34>
 c1e:	86 95       	lsr	r24
 c20:	77 95       	ror	r23
 c22:	67 95       	ror	r22
 c24:	b3 95       	inc	r27
 c26:	d9 f7       	brne	.-10     	; 0xc1e <__fixunssfsi+0x42>
 c28:	3e f4       	brtc	.+14     	; 0xc38 <__fixunssfsi+0x5c>
 c2a:	90 95       	com	r25
 c2c:	80 95       	com	r24
 c2e:	70 95       	com	r23
 c30:	61 95       	neg	r22
 c32:	7f 4f       	sbci	r23, 0xFF	; 255
 c34:	8f 4f       	sbci	r24, 0xFF	; 255
 c36:	9f 4f       	sbci	r25, 0xFF	; 255
 c38:	08 95       	ret

00000c3a <__floatunsisf>:
 c3a:	e8 94       	clt
 c3c:	09 c0       	rjmp	.+18     	; 0xc50 <__floatsisf+0x12>

00000c3e <__floatsisf>:
 c3e:	97 fb       	bst	r25, 7
 c40:	3e f4       	brtc	.+14     	; 0xc50 <__floatsisf+0x12>
 c42:	90 95       	com	r25
 c44:	80 95       	com	r24
 c46:	70 95       	com	r23
 c48:	61 95       	neg	r22
 c4a:	7f 4f       	sbci	r23, 0xFF	; 255
 c4c:	8f 4f       	sbci	r24, 0xFF	; 255
 c4e:	9f 4f       	sbci	r25, 0xFF	; 255
 c50:	99 23       	and	r25, r25
 c52:	a9 f0       	breq	.+42     	; 0xc7e <__floatsisf+0x40>
 c54:	f9 2f       	mov	r31, r25
 c56:	96 e9       	ldi	r25, 0x96	; 150
 c58:	bb 27       	eor	r27, r27
 c5a:	93 95       	inc	r25
 c5c:	f6 95       	lsr	r31
 c5e:	87 95       	ror	r24
 c60:	77 95       	ror	r23
 c62:	67 95       	ror	r22
 c64:	b7 95       	ror	r27
 c66:	f1 11       	cpse	r31, r1
 c68:	f8 cf       	rjmp	.-16     	; 0xc5a <__floatsisf+0x1c>
 c6a:	fa f4       	brpl	.+62     	; 0xcaa <__floatsisf+0x6c>
 c6c:	bb 0f       	add	r27, r27
 c6e:	11 f4       	brne	.+4      	; 0xc74 <__floatsisf+0x36>
 c70:	60 ff       	sbrs	r22, 0
 c72:	1b c0       	rjmp	.+54     	; 0xcaa <__floatsisf+0x6c>
 c74:	6f 5f       	subi	r22, 0xFF	; 255
 c76:	7f 4f       	sbci	r23, 0xFF	; 255
 c78:	8f 4f       	sbci	r24, 0xFF	; 255
 c7a:	9f 4f       	sbci	r25, 0xFF	; 255
 c7c:	16 c0       	rjmp	.+44     	; 0xcaa <__floatsisf+0x6c>
 c7e:	88 23       	and	r24, r24
 c80:	11 f0       	breq	.+4      	; 0xc86 <__floatsisf+0x48>
 c82:	96 e9       	ldi	r25, 0x96	; 150
 c84:	11 c0       	rjmp	.+34     	; 0xca8 <__floatsisf+0x6a>
 c86:	77 23       	and	r23, r23
 c88:	21 f0       	breq	.+8      	; 0xc92 <__floatsisf+0x54>
 c8a:	9e e8       	ldi	r25, 0x8E	; 142
 c8c:	87 2f       	mov	r24, r23
 c8e:	76 2f       	mov	r23, r22
 c90:	05 c0       	rjmp	.+10     	; 0xc9c <__floatsisf+0x5e>
 c92:	66 23       	and	r22, r22
 c94:	71 f0       	breq	.+28     	; 0xcb2 <__floatsisf+0x74>
 c96:	96 e8       	ldi	r25, 0x86	; 134
 c98:	86 2f       	mov	r24, r22
 c9a:	70 e0       	ldi	r23, 0x00	; 0
 c9c:	60 e0       	ldi	r22, 0x00	; 0
 c9e:	2a f0       	brmi	.+10     	; 0xcaa <__floatsisf+0x6c>
 ca0:	9a 95       	dec	r25
 ca2:	66 0f       	add	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	da f7       	brpl	.-10     	; 0xca0 <__floatsisf+0x62>
 caa:	88 0f       	add	r24, r24
 cac:	96 95       	lsr	r25
 cae:	87 95       	ror	r24
 cb0:	97 f9       	bld	r25, 7
 cb2:	08 95       	ret

00000cb4 <__fp_cmp>:
 cb4:	99 0f       	add	r25, r25
 cb6:	00 08       	sbc	r0, r0
 cb8:	55 0f       	add	r21, r21
 cba:	aa 0b       	sbc	r26, r26
 cbc:	e0 e8       	ldi	r30, 0x80	; 128
 cbe:	fe ef       	ldi	r31, 0xFE	; 254
 cc0:	16 16       	cp	r1, r22
 cc2:	17 06       	cpc	r1, r23
 cc4:	e8 07       	cpc	r30, r24
 cc6:	f9 07       	cpc	r31, r25
 cc8:	c0 f0       	brcs	.+48     	; 0xcfa <__fp_cmp+0x46>
 cca:	12 16       	cp	r1, r18
 ccc:	13 06       	cpc	r1, r19
 cce:	e4 07       	cpc	r30, r20
 cd0:	f5 07       	cpc	r31, r21
 cd2:	98 f0       	brcs	.+38     	; 0xcfa <__fp_cmp+0x46>
 cd4:	62 1b       	sub	r22, r18
 cd6:	73 0b       	sbc	r23, r19
 cd8:	84 0b       	sbc	r24, r20
 cda:	95 0b       	sbc	r25, r21
 cdc:	39 f4       	brne	.+14     	; 0xcec <__fp_cmp+0x38>
 cde:	0a 26       	eor	r0, r26
 ce0:	61 f0       	breq	.+24     	; 0xcfa <__fp_cmp+0x46>
 ce2:	23 2b       	or	r18, r19
 ce4:	24 2b       	or	r18, r20
 ce6:	25 2b       	or	r18, r21
 ce8:	21 f4       	brne	.+8      	; 0xcf2 <__fp_cmp+0x3e>
 cea:	08 95       	ret
 cec:	0a 26       	eor	r0, r26
 cee:	09 f4       	brne	.+2      	; 0xcf2 <__fp_cmp+0x3e>
 cf0:	a1 40       	sbci	r26, 0x01	; 1
 cf2:	a6 95       	lsr	r26
 cf4:	8f ef       	ldi	r24, 0xFF	; 255
 cf6:	81 1d       	adc	r24, r1
 cf8:	81 1d       	adc	r24, r1
 cfa:	08 95       	ret

00000cfc <__fp_inf>:
 cfc:	97 f9       	bld	r25, 7
 cfe:	9f 67       	ori	r25, 0x7F	; 127
 d00:	80 e8       	ldi	r24, 0x80	; 128
 d02:	70 e0       	ldi	r23, 0x00	; 0
 d04:	60 e0       	ldi	r22, 0x00	; 0
 d06:	08 95       	ret

00000d08 <__fp_mintl>:
 d08:	88 23       	and	r24, r24
 d0a:	71 f4       	brne	.+28     	; 0xd28 <__fp_mintl+0x20>
 d0c:	77 23       	and	r23, r23
 d0e:	21 f0       	breq	.+8      	; 0xd18 <__fp_mintl+0x10>
 d10:	98 50       	subi	r25, 0x08	; 8
 d12:	87 2b       	or	r24, r23
 d14:	76 2f       	mov	r23, r22
 d16:	07 c0       	rjmp	.+14     	; 0xd26 <__fp_mintl+0x1e>
 d18:	66 23       	and	r22, r22
 d1a:	11 f4       	brne	.+4      	; 0xd20 <__fp_mintl+0x18>
 d1c:	99 27       	eor	r25, r25
 d1e:	0d c0       	rjmp	.+26     	; 0xd3a <__fp_mintl+0x32>
 d20:	90 51       	subi	r25, 0x10	; 16
 d22:	86 2b       	or	r24, r22
 d24:	70 e0       	ldi	r23, 0x00	; 0
 d26:	60 e0       	ldi	r22, 0x00	; 0
 d28:	2a f0       	brmi	.+10     	; 0xd34 <__fp_mintl+0x2c>
 d2a:	9a 95       	dec	r25
 d2c:	66 0f       	add	r22, r22
 d2e:	77 1f       	adc	r23, r23
 d30:	88 1f       	adc	r24, r24
 d32:	da f7       	brpl	.-10     	; 0xd2a <__fp_mintl+0x22>
 d34:	88 0f       	add	r24, r24
 d36:	96 95       	lsr	r25
 d38:	87 95       	ror	r24
 d3a:	97 f9       	bld	r25, 7
 d3c:	08 95       	ret

00000d3e <__fp_mpack>:
 d3e:	9f 3f       	cpi	r25, 0xFF	; 255
 d40:	31 f0       	breq	.+12     	; 0xd4e <__fp_mpack_finite+0xc>

00000d42 <__fp_mpack_finite>:
 d42:	91 50       	subi	r25, 0x01	; 1
 d44:	20 f4       	brcc	.+8      	; 0xd4e <__fp_mpack_finite+0xc>
 d46:	87 95       	ror	r24
 d48:	77 95       	ror	r23
 d4a:	67 95       	ror	r22
 d4c:	b7 95       	ror	r27
 d4e:	88 0f       	add	r24, r24
 d50:	91 1d       	adc	r25, r1
 d52:	96 95       	lsr	r25
 d54:	87 95       	ror	r24
 d56:	97 f9       	bld	r25, 7
 d58:	08 95       	ret

00000d5a <__fp_nan>:
 d5a:	9f ef       	ldi	r25, 0xFF	; 255
 d5c:	80 ec       	ldi	r24, 0xC0	; 192
 d5e:	08 95       	ret

00000d60 <__fp_pscA>:
 d60:	00 24       	eor	r0, r0
 d62:	0a 94       	dec	r0
 d64:	16 16       	cp	r1, r22
 d66:	17 06       	cpc	r1, r23
 d68:	18 06       	cpc	r1, r24
 d6a:	09 06       	cpc	r0, r25
 d6c:	08 95       	ret

00000d6e <__fp_pscB>:
 d6e:	00 24       	eor	r0, r0
 d70:	0a 94       	dec	r0
 d72:	12 16       	cp	r1, r18
 d74:	13 06       	cpc	r1, r19
 d76:	14 06       	cpc	r1, r20
 d78:	05 06       	cpc	r0, r21
 d7a:	08 95       	ret

00000d7c <__fp_round>:
 d7c:	09 2e       	mov	r0, r25
 d7e:	03 94       	inc	r0
 d80:	00 0c       	add	r0, r0
 d82:	11 f4       	brne	.+4      	; 0xd88 <__fp_round+0xc>
 d84:	88 23       	and	r24, r24
 d86:	52 f0       	brmi	.+20     	; 0xd9c <__fp_round+0x20>
 d88:	bb 0f       	add	r27, r27
 d8a:	40 f4       	brcc	.+16     	; 0xd9c <__fp_round+0x20>
 d8c:	bf 2b       	or	r27, r31
 d8e:	11 f4       	brne	.+4      	; 0xd94 <__fp_round+0x18>
 d90:	60 ff       	sbrs	r22, 0
 d92:	04 c0       	rjmp	.+8      	; 0xd9c <__fp_round+0x20>
 d94:	6f 5f       	subi	r22, 0xFF	; 255
 d96:	7f 4f       	sbci	r23, 0xFF	; 255
 d98:	8f 4f       	sbci	r24, 0xFF	; 255
 d9a:	9f 4f       	sbci	r25, 0xFF	; 255
 d9c:	08 95       	ret

00000d9e <__fp_split3>:
 d9e:	57 fd       	sbrc	r21, 7
 da0:	90 58       	subi	r25, 0x80	; 128
 da2:	44 0f       	add	r20, r20
 da4:	55 1f       	adc	r21, r21
 da6:	59 f0       	breq	.+22     	; 0xdbe <__fp_splitA+0x10>
 da8:	5f 3f       	cpi	r21, 0xFF	; 255
 daa:	71 f0       	breq	.+28     	; 0xdc8 <__fp_splitA+0x1a>
 dac:	47 95       	ror	r20

00000dae <__fp_splitA>:
 dae:	88 0f       	add	r24, r24
 db0:	97 fb       	bst	r25, 7
 db2:	99 1f       	adc	r25, r25
 db4:	61 f0       	breq	.+24     	; 0xdce <__fp_splitA+0x20>
 db6:	9f 3f       	cpi	r25, 0xFF	; 255
 db8:	79 f0       	breq	.+30     	; 0xdd8 <__fp_splitA+0x2a>
 dba:	87 95       	ror	r24
 dbc:	08 95       	ret
 dbe:	12 16       	cp	r1, r18
 dc0:	13 06       	cpc	r1, r19
 dc2:	14 06       	cpc	r1, r20
 dc4:	55 1f       	adc	r21, r21
 dc6:	f2 cf       	rjmp	.-28     	; 0xdac <__fp_split3+0xe>
 dc8:	46 95       	lsr	r20
 dca:	f1 df       	rcall	.-30     	; 0xdae <__fp_splitA>
 dcc:	08 c0       	rjmp	.+16     	; 0xdde <__fp_splitA+0x30>
 dce:	16 16       	cp	r1, r22
 dd0:	17 06       	cpc	r1, r23
 dd2:	18 06       	cpc	r1, r24
 dd4:	99 1f       	adc	r25, r25
 dd6:	f1 cf       	rjmp	.-30     	; 0xdba <__fp_splitA+0xc>
 dd8:	86 95       	lsr	r24
 dda:	71 05       	cpc	r23, r1
 ddc:	61 05       	cpc	r22, r1
 dde:	08 94       	sec
 de0:	08 95       	ret

00000de2 <__fp_trunc>:
 de2:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_splitA>
 de6:	a0 f0       	brcs	.+40     	; 0xe10 <__fp_trunc+0x2e>
 de8:	be e7       	ldi	r27, 0x7E	; 126
 dea:	b9 17       	cp	r27, r25
 dec:	88 f4       	brcc	.+34     	; 0xe10 <__fp_trunc+0x2e>
 dee:	bb 27       	eor	r27, r27
 df0:	9f 38       	cpi	r25, 0x8F	; 143
 df2:	60 f4       	brcc	.+24     	; 0xe0c <__fp_trunc+0x2a>
 df4:	16 16       	cp	r1, r22
 df6:	b1 1d       	adc	r27, r1
 df8:	67 2f       	mov	r22, r23
 dfa:	78 2f       	mov	r23, r24
 dfc:	88 27       	eor	r24, r24
 dfe:	98 5f       	subi	r25, 0xF8	; 248
 e00:	f7 cf       	rjmp	.-18     	; 0xdf0 <__fp_trunc+0xe>
 e02:	86 95       	lsr	r24
 e04:	77 95       	ror	r23
 e06:	67 95       	ror	r22
 e08:	b1 1d       	adc	r27, r1
 e0a:	93 95       	inc	r25
 e0c:	96 39       	cpi	r25, 0x96	; 150
 e0e:	c8 f3       	brcs	.-14     	; 0xe02 <__fp_trunc+0x20>
 e10:	08 95       	ret

00000e12 <__fp_zero>:
 e12:	e8 94       	clt

00000e14 <__fp_szero>:
 e14:	bb 27       	eor	r27, r27
 e16:	66 27       	eor	r22, r22
 e18:	77 27       	eor	r23, r23
 e1a:	cb 01       	movw	r24, r22
 e1c:	97 f9       	bld	r25, 7
 e1e:	08 95       	ret

00000e20 <__gesf2>:
 e20:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_cmp>
 e24:	08 f4       	brcc	.+2      	; 0xe28 <__gesf2+0x8>
 e26:	8f ef       	ldi	r24, 0xFF	; 255
 e28:	08 95       	ret

00000e2a <__mulsf3>:
 e2a:	0e 94 28 07 	call	0xe50	; 0xe50 <__mulsf3x>
 e2e:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_round>
 e32:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_pscA>
 e36:	38 f0       	brcs	.+14     	; 0xe46 <__mulsf3+0x1c>
 e38:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__fp_pscB>
 e3c:	20 f0       	brcs	.+8      	; 0xe46 <__mulsf3+0x1c>
 e3e:	95 23       	and	r25, r21
 e40:	11 f0       	breq	.+4      	; 0xe46 <__mulsf3+0x1c>
 e42:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_inf>
 e46:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_nan>
 e4a:	11 24       	eor	r1, r1
 e4c:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_szero>

00000e50 <__mulsf3x>:
 e50:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_split3>
 e54:	70 f3       	brcs	.-36     	; 0xe32 <__mulsf3+0x8>

00000e56 <__mulsf3_pse>:
 e56:	95 9f       	mul	r25, r21
 e58:	c1 f3       	breq	.-16     	; 0xe4a <__mulsf3+0x20>
 e5a:	95 0f       	add	r25, r21
 e5c:	50 e0       	ldi	r21, 0x00	; 0
 e5e:	55 1f       	adc	r21, r21
 e60:	62 9f       	mul	r22, r18
 e62:	f0 01       	movw	r30, r0
 e64:	72 9f       	mul	r23, r18
 e66:	bb 27       	eor	r27, r27
 e68:	f0 0d       	add	r31, r0
 e6a:	b1 1d       	adc	r27, r1
 e6c:	63 9f       	mul	r22, r19
 e6e:	aa 27       	eor	r26, r26
 e70:	f0 0d       	add	r31, r0
 e72:	b1 1d       	adc	r27, r1
 e74:	aa 1f       	adc	r26, r26
 e76:	64 9f       	mul	r22, r20
 e78:	66 27       	eor	r22, r22
 e7a:	b0 0d       	add	r27, r0
 e7c:	a1 1d       	adc	r26, r1
 e7e:	66 1f       	adc	r22, r22
 e80:	82 9f       	mul	r24, r18
 e82:	22 27       	eor	r18, r18
 e84:	b0 0d       	add	r27, r0
 e86:	a1 1d       	adc	r26, r1
 e88:	62 1f       	adc	r22, r18
 e8a:	73 9f       	mul	r23, r19
 e8c:	b0 0d       	add	r27, r0
 e8e:	a1 1d       	adc	r26, r1
 e90:	62 1f       	adc	r22, r18
 e92:	83 9f       	mul	r24, r19
 e94:	a0 0d       	add	r26, r0
 e96:	61 1d       	adc	r22, r1
 e98:	22 1f       	adc	r18, r18
 e9a:	74 9f       	mul	r23, r20
 e9c:	33 27       	eor	r19, r19
 e9e:	a0 0d       	add	r26, r0
 ea0:	61 1d       	adc	r22, r1
 ea2:	23 1f       	adc	r18, r19
 ea4:	84 9f       	mul	r24, r20
 ea6:	60 0d       	add	r22, r0
 ea8:	21 1d       	adc	r18, r1
 eaa:	82 2f       	mov	r24, r18
 eac:	76 2f       	mov	r23, r22
 eae:	6a 2f       	mov	r22, r26
 eb0:	11 24       	eor	r1, r1
 eb2:	9f 57       	subi	r25, 0x7F	; 127
 eb4:	50 40       	sbci	r21, 0x00	; 0
 eb6:	9a f0       	brmi	.+38     	; 0xede <__mulsf3_pse+0x88>
 eb8:	f1 f0       	breq	.+60     	; 0xef6 <__mulsf3_pse+0xa0>
 eba:	88 23       	and	r24, r24
 ebc:	4a f0       	brmi	.+18     	; 0xed0 <__mulsf3_pse+0x7a>
 ebe:	ee 0f       	add	r30, r30
 ec0:	ff 1f       	adc	r31, r31
 ec2:	bb 1f       	adc	r27, r27
 ec4:	66 1f       	adc	r22, r22
 ec6:	77 1f       	adc	r23, r23
 ec8:	88 1f       	adc	r24, r24
 eca:	91 50       	subi	r25, 0x01	; 1
 ecc:	50 40       	sbci	r21, 0x00	; 0
 ece:	a9 f7       	brne	.-22     	; 0xeba <__mulsf3_pse+0x64>
 ed0:	9e 3f       	cpi	r25, 0xFE	; 254
 ed2:	51 05       	cpc	r21, r1
 ed4:	80 f0       	brcs	.+32     	; 0xef6 <__mulsf3_pse+0xa0>
 ed6:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_inf>
 eda:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_szero>
 ede:	5f 3f       	cpi	r21, 0xFF	; 255
 ee0:	e4 f3       	brlt	.-8      	; 0xeda <__mulsf3_pse+0x84>
 ee2:	98 3e       	cpi	r25, 0xE8	; 232
 ee4:	d4 f3       	brlt	.-12     	; 0xeda <__mulsf3_pse+0x84>
 ee6:	86 95       	lsr	r24
 ee8:	77 95       	ror	r23
 eea:	67 95       	ror	r22
 eec:	b7 95       	ror	r27
 eee:	f7 95       	ror	r31
 ef0:	e7 95       	ror	r30
 ef2:	9f 5f       	subi	r25, 0xFF	; 255
 ef4:	c1 f7       	brne	.-16     	; 0xee6 <__mulsf3_pse+0x90>
 ef6:	fe 2b       	or	r31, r30
 ef8:	88 0f       	add	r24, r24
 efa:	91 1d       	adc	r25, r1
 efc:	96 95       	lsr	r25
 efe:	87 95       	ror	r24
 f00:	97 f9       	bld	r25, 7
 f02:	08 95       	ret

00000f04 <__divmodhi4>:
 f04:	97 fb       	bst	r25, 7
 f06:	07 2e       	mov	r0, r23
 f08:	16 f4       	brtc	.+4      	; 0xf0e <__divmodhi4+0xa>
 f0a:	00 94       	com	r0
 f0c:	07 d0       	rcall	.+14     	; 0xf1c <__divmodhi4_neg1>
 f0e:	77 fd       	sbrc	r23, 7
 f10:	09 d0       	rcall	.+18     	; 0xf24 <__divmodhi4_neg2>
 f12:	0e 94 96 07 	call	0xf2c	; 0xf2c <__udivmodhi4>
 f16:	07 fc       	sbrc	r0, 7
 f18:	05 d0       	rcall	.+10     	; 0xf24 <__divmodhi4_neg2>
 f1a:	3e f4       	brtc	.+14     	; 0xf2a <__divmodhi4_exit>

00000f1c <__divmodhi4_neg1>:
 f1c:	90 95       	com	r25
 f1e:	81 95       	neg	r24
 f20:	9f 4f       	sbci	r25, 0xFF	; 255
 f22:	08 95       	ret

00000f24 <__divmodhi4_neg2>:
 f24:	70 95       	com	r23
 f26:	61 95       	neg	r22
 f28:	7f 4f       	sbci	r23, 0xFF	; 255

00000f2a <__divmodhi4_exit>:
 f2a:	08 95       	ret

00000f2c <__udivmodhi4>:
 f2c:	aa 1b       	sub	r26, r26
 f2e:	bb 1b       	sub	r27, r27
 f30:	51 e1       	ldi	r21, 0x11	; 17
 f32:	07 c0       	rjmp	.+14     	; 0xf42 <__udivmodhi4_ep>

00000f34 <__udivmodhi4_loop>:
 f34:	aa 1f       	adc	r26, r26
 f36:	bb 1f       	adc	r27, r27
 f38:	a6 17       	cp	r26, r22
 f3a:	b7 07       	cpc	r27, r23
 f3c:	10 f0       	brcs	.+4      	; 0xf42 <__udivmodhi4_ep>
 f3e:	a6 1b       	sub	r26, r22
 f40:	b7 0b       	sbc	r27, r23

00000f42 <__udivmodhi4_ep>:
 f42:	88 1f       	adc	r24, r24
 f44:	99 1f       	adc	r25, r25
 f46:	5a 95       	dec	r21
 f48:	a9 f7       	brne	.-22     	; 0xf34 <__udivmodhi4_loop>
 f4a:	80 95       	com	r24
 f4c:	90 95       	com	r25
 f4e:	bc 01       	movw	r22, r24
 f50:	cd 01       	movw	r24, r26
 f52:	08 95       	ret

00000f54 <_exit>:
 f54:	f8 94       	cli

00000f56 <__stop_program>:
 f56:	ff cf       	rjmp	.-2      	; 0xf56 <__stop_program>
